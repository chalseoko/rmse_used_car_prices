{"cells":[{"source":"<a href=\"https://www.kaggle.com/code/chalseo/rmse-regression-used-car-prices?scriptVersionId=198712140\" target=\"_blank\"><img align=\"left\" alt=\"Kaggle\" title=\"Open in Kaggle\" src=\"https://kaggle.com/static/images/open-in-kaggle.svg\"></a>","metadata":{},"cell_type":"markdown"},{"cell_type":"code","execution_count":1,"id":"6ae27e1a","metadata":{"_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","execution":{"iopub.execute_input":"2024-09-29T01:48:54.524518Z","iopub.status.busy":"2024-09-29T01:48:54.523914Z","iopub.status.idle":"2024-09-29T01:48:57.444945Z","shell.execute_reply":"2024-09-29T01:48:57.443623Z"},"papermill":{"duration":2.931853,"end_time":"2024-09-29T01:48:57.448008","exception":false,"start_time":"2024-09-29T01:48:54.516155","status":"completed"},"tags":[]},"outputs":[],"source":["import numpy as np \n","import pandas as pd \n","from matplotlib import pyplot as plt\n","\n","import datetime\n","import re\n","\n","from sklearn.compose import make_column_transformer\n","from sklearn.model_selection import train_test_split\n","from sklearn.metrics import mean_squared_error\n","\n","from sklearn.preprocessing import LabelEncoder, StandardScaler\n","from sklearn.impute import SimpleImputer\n","\n","from sklearn.linear_model import ElasticNetCV\n","from sklearn.model_selection import RepeatedKFold"]},{"cell_type":"code","execution_count":2,"id":"805e1ba8","metadata":{"execution":{"iopub.execute_input":"2024-09-29T01:48:57.46035Z","iopub.status.busy":"2024-09-29T01:48:57.459164Z","iopub.status.idle":"2024-09-29T01:48:59.364089Z","shell.execute_reply":"2024-09-29T01:48:59.362627Z"},"papermill":{"duration":1.914267,"end_time":"2024-09-29T01:48:59.36726","exception":false,"start_time":"2024-09-29T01:48:57.452993","status":"completed"},"tags":[]},"outputs":[{"name":"stdout","output_type":"stream","text":["Train data shape:  (188533, 12)\n","Test data shape:  (125690, 11) \n","\n","<class 'pandas.core.frame.DataFrame'>\n","Index: 314223 entries, 0 to 314222\n","Data columns (total 12 columns):\n"," #   Column        Non-Null Count   Dtype  \n","---  ------        --------------   -----  \n"," 0   brand         314223 non-null  object \n"," 1   model         314223 non-null  object \n"," 2   model_year    314223 non-null  int64  \n"," 3   milage        314223 non-null  int64  \n"," 4   fuel_type     305757 non-null  object \n"," 5   engine        314223 non-null  object \n"," 6   transmission  314223 non-null  object \n"," 7   ext_col       314223 non-null  object \n"," 8   int_col       314223 non-null  object \n"," 9   accident      310139 non-null  object \n"," 10  clean_title   278565 non-null  object \n"," 11  price         188533 non-null  float64\n","dtypes: float64(1), int64(2), object(9)\n","memory usage: 31.2+ MB\n"]}],"source":["train_data = pd.read_csv('/kaggle/input/playground-series-s4e9/train.csv', index_col='id')\n","test_data = pd.read_csv('/kaggle/input/playground-series-s4e9/test.csv', index_col='id')\n","\n","print(\"Train data shape: \", train_data.shape)\n","print(\"Test data shape: \", test_data.shape, \"\\n\")\n","\n","pd.concat([train_data, test_data]).info()"]},{"cell_type":"code","execution_count":3,"id":"0e00b448","metadata":{"execution":{"iopub.execute_input":"2024-09-29T01:48:59.379941Z","iopub.status.busy":"2024-09-29T01:48:59.379474Z","iopub.status.idle":"2024-09-29T01:48:59.448787Z","shell.execute_reply":"2024-09-29T01:48:59.4475Z"},"papermill":{"duration":0.079029,"end_time":"2024-09-29T01:48:59.451864","exception":false,"start_time":"2024-09-29T01:48:59.372835","status":"completed"},"tags":[]},"outputs":[{"name":"stdout","output_type":"stream","text":["Numerical features:  ['model_year' 'milage' 'price'] \n","\n"]},{"data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>count</th>\n","      <th>mean</th>\n","      <th>std</th>\n","      <th>min</th>\n","      <th>25%</th>\n","      <th>50%</th>\n","      <th>75%</th>\n","      <th>max</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>model_year</th>\n","      <td>188533.0</td>\n","      <td>2015.829998</td>\n","      <td>5.660967</td>\n","      <td>1974.0</td>\n","      <td>2013.0</td>\n","      <td>2017.0</td>\n","      <td>2020.0</td>\n","      <td>2024.0</td>\n","    </tr>\n","    <tr>\n","      <th>milage</th>\n","      <td>188533.0</td>\n","      <td>65705.295174</td>\n","      <td>49798.158076</td>\n","      <td>100.0</td>\n","      <td>24115.0</td>\n","      <td>57785.0</td>\n","      <td>95400.0</td>\n","      <td>405000.0</td>\n","    </tr>\n","    <tr>\n","      <th>price</th>\n","      <td>188533.0</td>\n","      <td>43878.016178</td>\n","      <td>78819.522254</td>\n","      <td>2000.0</td>\n","      <td>17000.0</td>\n","      <td>30825.0</td>\n","      <td>49900.0</td>\n","      <td>2954083.0</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["               count          mean           std     min      25%      50%  \\\n","model_year  188533.0   2015.829998      5.660967  1974.0   2013.0   2017.0   \n","milage      188533.0  65705.295174  49798.158076   100.0  24115.0  57785.0   \n","price       188533.0  43878.016178  78819.522254  2000.0  17000.0  30825.0   \n","\n","                75%        max  \n","model_year   2020.0     2024.0  \n","milage      95400.0   405000.0  \n","price       49900.0  2954083.0  "]},"execution_count":3,"metadata":{},"output_type":"execute_result"}],"source":["numerical_features = train_data.select_dtypes(include=np.number).columns.values\n","\n","print(\"Numerical features: \", numerical_features, \"\\n\")\n","train_data[numerical_features].describe().T"]},{"cell_type":"code","execution_count":4,"id":"614f24c4","metadata":{"execution":{"iopub.execute_input":"2024-09-29T01:48:59.468595Z","iopub.status.busy":"2024-09-29T01:48:59.467591Z","iopub.status.idle":"2024-09-29T01:49:00.035862Z","shell.execute_reply":"2024-09-29T01:49:00.034669Z"},"papermill":{"duration":0.580974,"end_time":"2024-09-29T01:49:00.038597","exception":false,"start_time":"2024-09-29T01:48:59.457623","status":"completed"},"tags":[]},"outputs":[{"name":"stdout","output_type":"stream","text":["Categorical features:  ['brand' 'model' 'fuel_type' 'engine' 'transmission' 'ext_col' 'int_col'\n"," 'accident' 'clean_title'] \n","\n"]},{"data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>count</th>\n","      <th>unique</th>\n","      <th>top</th>\n","      <th>freq</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>brand</th>\n","      <td>188533</td>\n","      <td>57</td>\n","      <td>Ford</td>\n","      <td>23088</td>\n","    </tr>\n","    <tr>\n","      <th>model</th>\n","      <td>188533</td>\n","      <td>1897</td>\n","      <td>F-150 XLT</td>\n","      <td>2945</td>\n","    </tr>\n","    <tr>\n","      <th>fuel_type</th>\n","      <td>183450</td>\n","      <td>7</td>\n","      <td>Gasoline</td>\n","      <td>165940</td>\n","    </tr>\n","    <tr>\n","      <th>engine</th>\n","      <td>188533</td>\n","      <td>1117</td>\n","      <td>355.0HP 5.3L 8 Cylinder Engine Gasoline Fuel</td>\n","      <td>3462</td>\n","    </tr>\n","    <tr>\n","      <th>transmission</th>\n","      <td>188533</td>\n","      <td>52</td>\n","      <td>A/T</td>\n","      <td>49904</td>\n","    </tr>\n","    <tr>\n","      <th>ext_col</th>\n","      <td>188533</td>\n","      <td>319</td>\n","      <td>Black</td>\n","      <td>48658</td>\n","    </tr>\n","    <tr>\n","      <th>int_col</th>\n","      <td>188533</td>\n","      <td>156</td>\n","      <td>Black</td>\n","      <td>107674</td>\n","    </tr>\n","    <tr>\n","      <th>accident</th>\n","      <td>186081</td>\n","      <td>2</td>\n","      <td>None reported</td>\n","      <td>144514</td>\n","    </tr>\n","    <tr>\n","      <th>clean_title</th>\n","      <td>167114</td>\n","      <td>1</td>\n","      <td>Yes</td>\n","      <td>167114</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["               count unique                                           top  \\\n","brand         188533     57                                          Ford   \n","model         188533   1897                                     F-150 XLT   \n","fuel_type     183450      7                                      Gasoline   \n","engine        188533   1117  355.0HP 5.3L 8 Cylinder Engine Gasoline Fuel   \n","transmission  188533     52                                           A/T   \n","ext_col       188533    319                                         Black   \n","int_col       188533    156                                         Black   \n","accident      186081      2                                 None reported   \n","clean_title   167114      1                                           Yes   \n","\n","                freq  \n","brand          23088  \n","model           2945  \n","fuel_type     165940  \n","engine          3462  \n","transmission   49904  \n","ext_col        48658  \n","int_col       107674  \n","accident      144514  \n","clean_title   167114  "]},"execution_count":4,"metadata":{},"output_type":"execute_result"}],"source":["categorical_features = train_data.select_dtypes(exclude=np.number).columns.values\n","print(\"Categorical features: \", categorical_features, \"\\n\")\n","\n","train_data[categorical_features].describe().T"]},{"cell_type":"markdown","id":"08233ebd","metadata":{"papermill":{"duration":0.006008,"end_time":"2024-09-29T01:49:00.050604","exception":false,"start_time":"2024-09-29T01:49:00.044596","status":"completed"},"tags":[]},"source":["remaining cols to add:\n","- trim_type (S, LE, etc.)"]},{"cell_type":"code","execution_count":5,"id":"a6794319","metadata":{"execution":{"iopub.execute_input":"2024-09-29T01:49:00.064014Z","iopub.status.busy":"2024-09-29T01:49:00.063214Z","iopub.status.idle":"2024-09-29T01:49:00.06835Z","shell.execute_reply":"2024-09-29T01:49:00.067237Z"},"papermill":{"duration":0.01475,"end_time":"2024-09-29T01:49:00.070992","exception":false,"start_time":"2024-09-29T01:49:00.056242","status":"completed"},"tags":[]},"outputs":[],"source":["# https://www.progressive.com/answers/car-trim-levels/ - base/performance/high-end\n","# for model in train_data.model.unique():\n","#     print(model)"]},{"cell_type":"code","execution_count":6,"id":"4214e5d9","metadata":{"execution":{"iopub.execute_input":"2024-09-29T01:49:00.084327Z","iopub.status.busy":"2024-09-29T01:49:00.08391Z","iopub.status.idle":"2024-09-29T01:49:00.092695Z","shell.execute_reply":"2024-09-29T01:49:00.091421Z"},"papermill":{"duration":0.018492,"end_time":"2024-09-29T01:49:00.095273","exception":false,"start_time":"2024-09-29T01:49:00.076781","status":"completed"},"tags":[]},"outputs":[],"source":["def get_re_group(r, txt):\n","    match = re.search(r, txt)\n","    \n","    if match:\n","        return float(match.groups()[0])\n","    else:\n","        return np.nan\n","\n","def address_missing_values(data):\n","    imputer = SimpleImputer(strategy='most_frequent')\n","    imputer_columns = data.isna().sum().where(lambda t: t > 0)\n","    imputer_columns = imputer_columns.dropna().index.values\n","    \n","    data[imputer_columns] = imputer.fit_transform(data[imputer_columns])\n","    data.clean_title = data.clean_title.apply(lambda title: 1 if title!='Yes' else 0)\n","    \n","    return data"]},{"cell_type":"code","execution_count":7,"id":"4263127e","metadata":{"execution":{"iopub.execute_input":"2024-09-29T01:49:00.1098Z","iopub.status.busy":"2024-09-29T01:49:00.108694Z","iopub.status.idle":"2024-09-29T01:49:06.697285Z","shell.execute_reply":"2024-09-29T01:49:06.696092Z"},"papermill":{"duration":6.598388,"end_time":"2024-09-29T01:49:06.699929","exception":false,"start_time":"2024-09-29T01:49:00.101541","status":"completed"},"tags":[]},"outputs":[{"data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>brand</th>\n","      <th>model_year</th>\n","      <th>milage</th>\n","      <th>fuel_type</th>\n","      <th>ext_col</th>\n","      <th>int_col</th>\n","      <th>accident</th>\n","      <th>clean_title</th>\n","      <th>price</th>\n","      <th>horse_power</th>\n","      <th>...</th>\n","      <th>model_type</th>\n","      <th>metallic_ext</th>\n","      <th>special_ext_coat</th>\n","      <th>top_ext_col</th>\n","      <th>dual_col_int</th>\n","      <th>black_int</th>\n","      <th>car_age</th>\n","      <th>yearly_mileage</th>\n","      <th>big_three_brand</th>\n","      <th>luxury_brand</th>\n","    </tr>\n","    <tr>\n","      <th>id</th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>31</td>\n","      <td>2007</td>\n","      <td>213000</td>\n","      <td>2</td>\n","      <td>312</td>\n","      <td>71</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>4200</td>\n","      <td>52</td>\n","      <td>...</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>17</td>\n","      <td>12529.411765</td>\n","      <td>0</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>28</td>\n","      <td>2002</td>\n","      <td>143250</td>\n","      <td>2</td>\n","      <td>263</td>\n","      <td>10</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>4999</td>\n","      <td>119</td>\n","      <td>...</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>22</td>\n","      <td>6511.363636</td>\n","      <td>0</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>9</td>\n","      <td>2002</td>\n","      <td>136731</td>\n","      <td>1</td>\n","      <td>38</td>\n","      <td>71</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>13900</td>\n","      <td>175</td>\n","      <td>...</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>22</td>\n","      <td>6215.045455</td>\n","      <td>1</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>16</td>\n","      <td>2017</td>\n","      <td>19500</td>\n","      <td>2</td>\n","      <td>29</td>\n","      <td>14</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>45000</td>\n","      <td>239</td>\n","      <td>...</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>7</td>\n","      <td>2785.714286</td>\n","      <td>0</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>36</td>\n","      <td>2021</td>\n","      <td>7388</td>\n","      <td>2</td>\n","      <td>29</td>\n","      <td>10</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>97500</td>\n","      <td>85</td>\n","      <td>...</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>3</td>\n","      <td>2462.666667</td>\n","      <td>0</td>\n","      <td>1</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>5 rows × 24 columns</p>\n","</div>"],"text/plain":["    brand  model_year  milage  fuel_type  ext_col  int_col  accident  \\\n","id                                                                     \n","0      31        2007  213000          2      312       71         1   \n","1      28        2002  143250          2      263       10         0   \n","2       9        2002  136731          1       38       71         1   \n","3      16        2017   19500          2       29       14         1   \n","4      36        2021    7388          2       29       10         1   \n","\n","    clean_title  price  horse_power  ...  model_type  metallic_ext  \\\n","id                                   ...                             \n","0             0   4200           52  ...           0             0   \n","1             0   4999          119  ...           0             0   \n","2             0  13900          175  ...           0             0   \n","3             0  45000          239  ...           0             0   \n","4             0  97500           85  ...           0             0   \n","\n","    special_ext_coat  top_ext_col  dual_col_int  black_int  car_age  \\\n","id                                                                    \n","0                  0            0             0          0       17   \n","1                  0            1             0          0       22   \n","2                  0            1             0          0       22   \n","3                  0            1             0          1        7   \n","4                  0            1             0          0        3   \n","\n","    yearly_mileage  big_three_brand  luxury_brand  \n","id                                                 \n","0     12529.411765                0             0  \n","1      6511.363636                0             0  \n","2      6215.045455                1             0  \n","3      2785.714286                0             0  \n","4      2462.666667                0             1  \n","\n","[5 rows x 24 columns]"]},"execution_count":7,"metadata":{},"output_type":"execute_result"}],"source":["def preprocess_data(data):\n","    data['horse_power'] = data.engine.apply(lambda en: get_re_group(r'(\\d+\\.\\d+)HP', en))\n","    data['engine_size'] = data.engine.apply(lambda en: get_re_group(r'(\\d+\\.\\d+)L', en))\n","    data['cylinders'] = data.engine.apply(lambda en: get_re_group(r'(\\d+) Cylinder', en))\n","\n","    data[\"transmission_type\"] = \"Other\"\n","    data[\"transmission_speed\"] = data.transmission.apply(lambda trans: int(re.findall(\"\\d+\", trans)[0]) if len(re.findall(\"\\d+\", trans)) == 1 else np.nan)\n","    data.loc[data.transmission.str.contains('A/T|Automatic|AT|Variable', na=False, case=False), 'transmission_type'] = 'Automatic'\n","    data.loc[data.transmission.str.contains('M/T|mt|Manual|at/mt|mt/at|At/mt', na=False, case=False), 'transmission_type'] = 'Manual'\n","   \n","    data[\"model_type\"] = \"Other\"\n","#     data.loc[data.transmission.str.contains('', na=False, case=False), 'model_type'] = 'Base'\n","#     data.loc[data.transmission.str.contains('', na=False, case=False), 'model_type'] = 'Performance'\n","#     data.loc[data.transmission.str.contains('', na=False, case=False), 'model_type'] = 'High-End'\n","\n","    data['metallic_ext'] = data.ext_col.apply(lambda color: 1 if \"Metallic\" in color else 0)\n","    data['special_ext_coat'] = data.ext_col.apply(lambda color: 1 if \"coat\" in color.lower() else 0)  \n","    data['top_ext_col'] = data.ext_col.apply(lambda color: 1 if color.lower() in [\"white\", \"black\", \"silver\", \"grey\", \"gray\", \"blue\"] else 0)    \n","    \n","    data['dual_col_int'] = data.int_col.apply(lambda color: 1 if '/' in color else 0)\n","    data['black_int'] = data.int_col.apply(lambda color: 1 if color.lower() == \"black\" else 0)\n","    \n","    data['car_age'] = datetime.datetime.now().year - data.model_year\n","    data['yearly_mileage'] = data.milage / data.car_age\n","\n","    data[\"big_three_brand\"] = data.brand.apply(lambda b: 1 if b in [\"Chrysler\", \"Ford\", \"Chevrolet\", \n","                            \"Buick\", \"GMC\", \"Cadillac\", \"Dodge\", \"Jeep\", \"RAM\"] else 0)\n","    data[\"luxury_brand\"] = data.brand.apply(lambda b: 1 if b in [\"BMW\", \"Mercedes-Benz\", \"Tesla\", \"Audi\",\n","                            \"Jaguar\", \"Land Rover\", \"Cadillac\", \"Porsche\", \"Volvo\", \"Lexus\", \"Ferrari\", \"Lamborghini\",\n","                                                \"Bentley\", \"Bugatti\", \"Maybach\", \"Chrysler\", \"Rolls-Royce\"] else 0)\n","    \n","    data = address_missing_values(data)\n","    categorical_features = data.select_dtypes(exclude=np.number).columns.values\n","    for category in categorical_features:\n","        data[category] = LabelEncoder().fit_transform(data[category])\n","\n","    return data.drop([\"engine\", \"transmission\", \"model\"], axis=1)\n","\n","train = preprocess_data(train_data)\n","# test = preprocess_data(test_data)\n","\n","train.head(5)"]},{"cell_type":"code","execution_count":8,"id":"65fa2398","metadata":{"execution":{"iopub.execute_input":"2024-09-29T01:49:06.714279Z","iopub.status.busy":"2024-09-29T01:49:06.713843Z","iopub.status.idle":"2024-09-29T01:49:06.72943Z","shell.execute_reply":"2024-09-29T01:49:06.728003Z"},"papermill":{"duration":0.026044,"end_time":"2024-09-29T01:49:06.732259","exception":false,"start_time":"2024-09-29T01:49:06.706215","status":"completed"},"tags":[]},"outputs":[{"data":{"text/plain":["brand                 0\n","model_year            0\n","milage                0\n","fuel_type             0\n","ext_col               0\n","int_col               0\n","accident              0\n","clean_title           0\n","price                 0\n","horse_power           0\n","engine_size           0\n","cylinders             0\n","transmission_type     0\n","transmission_speed    0\n","model_type            0\n","metallic_ext          0\n","special_ext_coat      0\n","top_ext_col           0\n","dual_col_int          0\n","black_int             0\n","car_age               0\n","yearly_mileage        0\n","big_three_brand       0\n","luxury_brand          0\n","dtype: int64"]},"execution_count":8,"metadata":{},"output_type":"execute_result"}],"source":["train.isna().sum()"]},{"cell_type":"code","execution_count":9,"id":"128970f4","metadata":{"execution":{"iopub.execute_input":"2024-09-29T01:49:06.746888Z","iopub.status.busy":"2024-09-29T01:49:06.746446Z","iopub.status.idle":"2024-09-29T01:49:06.751885Z","shell.execute_reply":"2024-09-29T01:49:06.750658Z"},"papermill":{"duration":0.015922,"end_time":"2024-09-29T01:49:06.754552","exception":false,"start_time":"2024-09-29T01:49:06.73863","status":"completed"},"tags":[]},"outputs":[],"source":["# transformer = make_column_transformer(\n","#     (StandardScaler(), train.columns.values), sparse_threshold=0)\n","# transformed_data = transformer.fit_transform(train)\n","# transformed_data\n","\n","# feature_names = [name.split(\"__\")[-1] for name in transformer.get_feature_names_out()]\n","# X = pd.DataFrame(transformed_data, columns=feature_names)\n","# y = train_data.price.values\n","\n","# X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42) \n","# X_train.head(3)"]},{"cell_type":"code","execution_count":null,"id":"e363223e","metadata":{"papermill":{"duration":0.006065,"end_time":"2024-09-29T01:49:06.766985","exception":false,"start_time":"2024-09-29T01:49:06.76092","status":"completed"},"tags":[]},"outputs":[],"source":[]}],"metadata":{"kaggle":{"accelerator":"none","dataSources":[{"databundleVersionId":9057646,"sourceId":76728,"sourceType":"competition"}],"dockerImageVersionId":30775,"isGpuEnabled":false,"isInternetEnabled":true,"language":"python","sourceType":"notebook"},"kernelspec":{"display_name":"Python 3","language":"python","name":"python3"},"language_info":{"codemirror_mode":{"name":"ipython","version":3},"file_extension":".py","mimetype":"text/x-python","name":"python","nbconvert_exporter":"python","pygments_lexer":"ipython3","version":"3.10.14"},"papermill":{"default_parameters":{},"duration":16.231583,"end_time":"2024-09-29T01:49:07.496033","environment_variables":{},"exception":null,"input_path":"__notebook__.ipynb","output_path":"__notebook__.ipynb","parameters":{},"start_time":"2024-09-29T01:48:51.26445","version":"2.6.0"}},"nbformat":4,"nbformat_minor":5}