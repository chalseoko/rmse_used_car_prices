{"cells":[{"source":"<a href=\"https://www.kaggle.com/code/chalseo/rmse-regression-used-car-prices?scriptVersionId=198637304\" target=\"_blank\"><img align=\"left\" alt=\"Kaggle\" title=\"Open in Kaggle\" src=\"https://kaggle.com/static/images/open-in-kaggle.svg\"></a>","metadata":{},"cell_type":"markdown"},{"cell_type":"code","execution_count":1,"id":"4fb25bfe","metadata":{"_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","execution":{"iopub.execute_input":"2024-09-28T11:14:07.591699Z","iopub.status.busy":"2024-09-28T11:14:07.590864Z","iopub.status.idle":"2024-09-28T11:14:10.206436Z","shell.execute_reply":"2024-09-28T11:14:10.205002Z"},"papermill":{"duration":2.624047,"end_time":"2024-09-28T11:14:10.209557","exception":false,"start_time":"2024-09-28T11:14:07.58551","status":"completed"},"tags":[]},"outputs":[],"source":["import numpy as np \n","import pandas as pd \n","from matplotlib import pyplot as plt\n","\n","import datetime\n","import re\n","\n","from sklearn.compose import make_column_transformer\n","from sklearn.model_selection import train_test_split\n","from sklearn.metrics import mean_squared_error\n","from sklearn.preprocessing import LabelEncoder, StandardScaler\n","from sklearn.impute import SimpleImputer\n","\n","from sklearn.linear_model import ElasticNetCV\n","from sklearn.model_selection import RepeatedKFold"]},{"cell_type":"code","execution_count":2,"id":"dfffc773","metadata":{"execution":{"iopub.execute_input":"2024-09-28T11:14:10.218513Z","iopub.status.busy":"2024-09-28T11:14:10.217824Z","iopub.status.idle":"2024-09-28T11:14:11.778607Z","shell.execute_reply":"2024-09-28T11:14:11.777349Z"},"papermill":{"duration":1.568172,"end_time":"2024-09-28T11:14:11.781198","exception":false,"start_time":"2024-09-28T11:14:10.213026","status":"completed"},"tags":[]},"outputs":[{"name":"stdout","output_type":"stream","text":["Train data shape:  (188533, 12)\n","Test data shape:  (125690, 11) \n","\n","<class 'pandas.core.frame.DataFrame'>\n","Index: 314223 entries, 0 to 314222\n","Data columns (total 12 columns):\n"," #   Column        Non-Null Count   Dtype  \n","---  ------        --------------   -----  \n"," 0   brand         314223 non-null  object \n"," 1   model         314223 non-null  object \n"," 2   model_year    314223 non-null  int64  \n"," 3   milage        314223 non-null  int64  \n"," 4   fuel_type     305757 non-null  object \n"," 5   engine        314223 non-null  object \n"," 6   transmission  314223 non-null  object \n"," 7   ext_col       314223 non-null  object \n"," 8   int_col       314223 non-null  object \n"," 9   accident      310139 non-null  object \n"," 10  clean_title   278565 non-null  object \n"," 11  price         188533 non-null  float64\n","dtypes: float64(1), int64(2), object(9)\n","memory usage: 31.2+ MB\n"]}],"source":["train_data = pd.read_csv('/kaggle/input/playground-series-s4e9/train.csv', index_col='id')\n","test_data = pd.read_csv('/kaggle/input/playground-series-s4e9/test.csv', index_col='id')\n","\n","print(\"Train data shape: \", train_data.shape)\n","print(\"Test data shape: \", test_data.shape, \"\\n\")\n","\n","pd.concat([train_data, test_data]).info()"]},{"cell_type":"code","execution_count":3,"id":"89641922","metadata":{"execution":{"iopub.execute_input":"2024-09-28T11:14:11.789968Z","iopub.status.busy":"2024-09-28T11:14:11.789059Z","iopub.status.idle":"2024-09-28T11:14:11.844158Z","shell.execute_reply":"2024-09-28T11:14:11.842832Z"},"papermill":{"duration":0.062033,"end_time":"2024-09-28T11:14:11.846688","exception":false,"start_time":"2024-09-28T11:14:11.784655","status":"completed"},"tags":[]},"outputs":[{"name":"stdout","output_type":"stream","text":["Numerical features:  ['model_year' 'milage' 'price'] \n","\n"]},{"data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>model_year</th>\n","      <th>milage</th>\n","      <th>price</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>count</th>\n","      <td>188533.000000</td>\n","      <td>188533.000000</td>\n","      <td>1.885330e+05</td>\n","    </tr>\n","    <tr>\n","      <th>mean</th>\n","      <td>2015.829998</td>\n","      <td>65705.295174</td>\n","      <td>4.387802e+04</td>\n","    </tr>\n","    <tr>\n","      <th>std</th>\n","      <td>5.660967</td>\n","      <td>49798.158076</td>\n","      <td>7.881952e+04</td>\n","    </tr>\n","    <tr>\n","      <th>min</th>\n","      <td>1974.000000</td>\n","      <td>100.000000</td>\n","      <td>2.000000e+03</td>\n","    </tr>\n","    <tr>\n","      <th>25%</th>\n","      <td>2013.000000</td>\n","      <td>24115.000000</td>\n","      <td>1.700000e+04</td>\n","    </tr>\n","    <tr>\n","      <th>50%</th>\n","      <td>2017.000000</td>\n","      <td>57785.000000</td>\n","      <td>3.082500e+04</td>\n","    </tr>\n","    <tr>\n","      <th>75%</th>\n","      <td>2020.000000</td>\n","      <td>95400.000000</td>\n","      <td>4.990000e+04</td>\n","    </tr>\n","    <tr>\n","      <th>max</th>\n","      <td>2024.000000</td>\n","      <td>405000.000000</td>\n","      <td>2.954083e+06</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["          model_year         milage         price\n","count  188533.000000  188533.000000  1.885330e+05\n","mean     2015.829998   65705.295174  4.387802e+04\n","std         5.660967   49798.158076  7.881952e+04\n","min      1974.000000     100.000000  2.000000e+03\n","25%      2013.000000   24115.000000  1.700000e+04\n","50%      2017.000000   57785.000000  3.082500e+04\n","75%      2020.000000   95400.000000  4.990000e+04\n","max      2024.000000  405000.000000  2.954083e+06"]},"execution_count":3,"metadata":{},"output_type":"execute_result"}],"source":["numerical_features = train_data.select_dtypes(include=np.number).columns.values\n","\n","print(\"Numerical features: \", numerical_features, \"\\n\")\n","train_data[numerical_features].describe()"]},{"cell_type":"code","execution_count":4,"id":"98fa589a","metadata":{"execution":{"iopub.execute_input":"2024-09-28T11:14:11.855524Z","iopub.status.busy":"2024-09-28T11:14:11.85508Z","iopub.status.idle":"2024-09-28T11:14:12.124074Z","shell.execute_reply":"2024-09-28T11:14:12.122823Z"},"papermill":{"duration":0.276272,"end_time":"2024-09-28T11:14:12.126618","exception":false,"start_time":"2024-09-28T11:14:11.850346","status":"completed"},"tags":[]},"outputs":[{"name":"stdout","output_type":"stream","text":["Categorical features:  ['brand' 'model' 'fuel_type' 'engine' 'transmission' 'ext_col' 'int_col'\n"," 'accident' 'clean_title'] \n","\n"]},{"data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>count</th>\n","      <th>unique</th>\n","      <th>top</th>\n","      <th>freq</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>brand</th>\n","      <td>188533</td>\n","      <td>57</td>\n","      <td>Ford</td>\n","      <td>23088</td>\n","    </tr>\n","    <tr>\n","      <th>model</th>\n","      <td>188533</td>\n","      <td>1897</td>\n","      <td>F-150 XLT</td>\n","      <td>2945</td>\n","    </tr>\n","    <tr>\n","      <th>fuel_type</th>\n","      <td>183450</td>\n","      <td>7</td>\n","      <td>Gasoline</td>\n","      <td>165940</td>\n","    </tr>\n","    <tr>\n","      <th>engine</th>\n","      <td>188533</td>\n","      <td>1117</td>\n","      <td>355.0HP 5.3L 8 Cylinder Engine Gasoline Fuel</td>\n","      <td>3462</td>\n","    </tr>\n","    <tr>\n","      <th>transmission</th>\n","      <td>188533</td>\n","      <td>52</td>\n","      <td>A/T</td>\n","      <td>49904</td>\n","    </tr>\n","    <tr>\n","      <th>ext_col</th>\n","      <td>188533</td>\n","      <td>319</td>\n","      <td>Black</td>\n","      <td>48658</td>\n","    </tr>\n","    <tr>\n","      <th>int_col</th>\n","      <td>188533</td>\n","      <td>156</td>\n","      <td>Black</td>\n","      <td>107674</td>\n","    </tr>\n","    <tr>\n","      <th>accident</th>\n","      <td>186081</td>\n","      <td>2</td>\n","      <td>None reported</td>\n","      <td>144514</td>\n","    </tr>\n","    <tr>\n","      <th>clean_title</th>\n","      <td>167114</td>\n","      <td>1</td>\n","      <td>Yes</td>\n","      <td>167114</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["               count unique                                           top  \\\n","brand         188533     57                                          Ford   \n","model         188533   1897                                     F-150 XLT   \n","fuel_type     183450      7                                      Gasoline   \n","engine        188533   1117  355.0HP 5.3L 8 Cylinder Engine Gasoline Fuel   \n","transmission  188533     52                                           A/T   \n","ext_col       188533    319                                         Black   \n","int_col       188533    156                                         Black   \n","accident      186081      2                                 None reported   \n","clean_title   167114      1                                           Yes   \n","\n","                freq  \n","brand          23088  \n","model           2945  \n","fuel_type     165940  \n","engine          3462  \n","transmission   49904  \n","ext_col        48658  \n","int_col       107674  \n","accident      144514  \n","clean_title   167114  "]},"execution_count":4,"metadata":{},"output_type":"execute_result"}],"source":["categorical_features = train_data.select_dtypes(exclude=np.number).columns.values\n","print(\"Categorical features: \", categorical_features, \"\\n\")\n","\n","train_data[categorical_features].describe().T"]},{"cell_type":"markdown","id":"a5408bc9","metadata":{"papermill":{"duration":0.003568,"end_time":"2024-09-28T11:14:12.134248","exception":false,"start_time":"2024-09-28T11:14:12.13068","status":"completed"},"tags":[]},"source":["remaining cols to add:\n","- is_luxury_vehicle\n","- color_type_int/ext (neutral, warm, cool, etc.)\n","- coat_type_ext (pearlcoat, etc.)\n","- trim_type (S, LE, etc.)\n","- transmission - a,m,both?"]},{"cell_type":"code","execution_count":5,"id":"0e91306c","metadata":{"execution":{"iopub.execute_input":"2024-09-28T11:14:12.14429Z","iopub.status.busy":"2024-09-28T11:14:12.143868Z","iopub.status.idle":"2024-09-28T11:14:12.151541Z","shell.execute_reply":"2024-09-28T11:14:12.150293Z"},"papermill":{"duration":0.01566,"end_time":"2024-09-28T11:14:12.153865","exception":false,"start_time":"2024-09-28T11:14:12.138205","status":"completed"},"tags":[]},"outputs":[],"source":["def get_re_group(r, txt):\n","    match = re.search(r, txt)\n","    \n","    if match:\n","        return match.groups()[0]\n","    else:\n","        return 0\n","\n","def address_missing_values(data):\n","    imputer = SimpleImputer(strategy='most_frequent')\n","    imputer_columns = [\"accident\", \"fuel_type\"]\n","\n","    data[imputer_columns] = imputer.fit_transform(data[imputer_columns])\n","    data.clean_title = data.clean_title.apply(lambda title: 1 if title!='Yes' else 0)\n","    \n","    return data"]},{"cell_type":"code","execution_count":6,"id":"06785243","metadata":{"execution":{"iopub.execute_input":"2024-09-28T11:14:12.163861Z","iopub.status.busy":"2024-09-28T11:14:12.163234Z","iopub.status.idle":"2024-09-28T11:14:15.223098Z","shell.execute_reply":"2024-09-28T11:14:15.221824Z"},"papermill":{"duration":3.06795,"end_time":"2024-09-28T11:14:15.225892","exception":false,"start_time":"2024-09-28T11:14:12.157942","status":"completed"},"tags":[]},"outputs":[{"data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>brand</th>\n","      <th>model</th>\n","      <th>model_year</th>\n","      <th>milage</th>\n","      <th>fuel_type</th>\n","      <th>transmission</th>\n","      <th>ext_col</th>\n","      <th>int_col</th>\n","      <th>accident</th>\n","      <th>clean_title</th>\n","      <th>price</th>\n","      <th>horse_power</th>\n","      <th>liters</th>\n","      <th>cylinders</th>\n","      <th>dual_col_int</th>\n","      <th>car_age</th>\n","      <th>yearly_mileage</th>\n","      <th>big_three</th>\n","    </tr>\n","    <tr>\n","      <th>id</th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>31</td>\n","      <td>495</td>\n","      <td>2007</td>\n","      <td>213000</td>\n","      <td>2</td>\n","      <td>38</td>\n","      <td>312</td>\n","      <td>71</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>4200</td>\n","      <td>172.0</td>\n","      <td>1.6</td>\n","      <td>4</td>\n","      <td>0</td>\n","      <td>17</td>\n","      <td>12529.411765</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>28</td>\n","      <td>930</td>\n","      <td>2002</td>\n","      <td>143250</td>\n","      <td>2</td>\n","      <td>38</td>\n","      <td>263</td>\n","      <td>10</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>4999</td>\n","      <td>252.0</td>\n","      <td>3.9</td>\n","      <td>8</td>\n","      <td>0</td>\n","      <td>22</td>\n","      <td>6511.363636</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>9</td>\n","      <td>1575</td>\n","      <td>2002</td>\n","      <td>136731</td>\n","      <td>1</td>\n","      <td>38</td>\n","      <td>38</td>\n","      <td>71</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>13900</td>\n","      <td>320.0</td>\n","      <td>5.3</td>\n","      <td>8</td>\n","      <td>0</td>\n","      <td>22</td>\n","      <td>6215.045455</td>\n","      <td>1</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["    brand  model  model_year  milage  fuel_type  transmission  ext_col  \\\n","id                                                                       \n","0      31    495        2007  213000          2            38      312   \n","1      28    930        2002  143250          2            38      263   \n","2       9   1575        2002  136731          1            38       38   \n","\n","    int_col  accident  clean_title  price  horse_power  liters  cylinders  \\\n","id                                                                          \n","0        71         1            0   4200        172.0     1.6          4   \n","1        10         0            0   4999        252.0     3.9          8   \n","2        71         1            0  13900        320.0     5.3          8   \n","\n","    dual_col_int  car_age  yearly_mileage  big_three  \n","id                                                    \n","0              0       17    12529.411765          0  \n","1              0       22     6511.363636          0  \n","2              0       22     6215.045455          1  "]},"execution_count":6,"metadata":{},"output_type":"execute_result"}],"source":["def preprocess_data(data):\n","    data['horse_power'] = data.engine.apply(lambda en: float(get_re_group(r'(\\d+\\.\\d+)HP', en)))\n","    data['liters'] = data.engine.apply(lambda en: float(get_re_group(r'(\\d+\\.\\d+)L', en)))\n","    data['cylinders'] = data.engine.apply(lambda en: int(get_re_group(r'(\\d+) Cylinder', en)))\n","    \n","    data['dual_col_int'] = data.int_col.apply(lambda color: 1 if '/' in color else 0)\n","    \n","    data['car_age'] = datetime.datetime.now().year - data.model_year\n","    data['yearly_mileage'] = data.milage / data.car_age\n","\n","    data[\"big_three\"] = data.brand.apply(lambda b: 1 if b in [\"Chrysler\", \"Ford\", \"Chevrolet\", \"Buick\", \"GMC\", \"Cadillac\", \"Dodge\", \"Jeep\", \"RAM\"] else 0)\n","#     data[\"luxury_vehicle\"] = data.brand.apply(lambda b: 1 if b in [\"\"] else 0)\n","    \n","    data = address_missing_values(data)\n","    for category in categorical_features[:-1]:\n","        data[category] = LabelEncoder().fit_transform(data[category])\n","\n","    return data.drop(\"engine\", axis=1)\n","\n","train = preprocess_data(train_data)\n","test = preprocess_data(test_data)\n","\n","train.head(3)"]},{"cell_type":"code","execution_count":7,"id":"5436f883","metadata":{"execution":{"iopub.execute_input":"2024-09-28T11:14:15.237376Z","iopub.status.busy":"2024-09-28T11:14:15.236194Z","iopub.status.idle":"2024-09-28T11:14:15.241508Z","shell.execute_reply":"2024-09-28T11:14:15.240378Z"},"papermill":{"duration":0.013314,"end_time":"2024-09-28T11:14:15.243999","exception":false,"start_time":"2024-09-28T11:14:15.230685","status":"completed"},"tags":[]},"outputs":[],"source":["# transformer = make_column_transformer(\n","#     (StandardScaler(), train.columns.values), sparse_threshold=0)\n","# transformed_data = transformer.fit_transform(train)\n","# transformed_data\n","\n","# feature_names = [name.split(\"__\")[-1] for name in transformer.get_feature_names_out()]\n","# X = pd.DataFrame(transformed_data, columns=feature_names)\n","# y = train_data.price.values\n","\n","# X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42) \n","# X_train.head(3)"]},{"cell_type":"code","execution_count":null,"id":"a4050821","metadata":{"papermill":{"duration":0.00397,"end_time":"2024-09-28T11:14:15.252452","exception":false,"start_time":"2024-09-28T11:14:15.248482","status":"completed"},"tags":[]},"outputs":[],"source":[]},{"cell_type":"code","execution_count":null,"id":"e45894e7","metadata":{"papermill":{"duration":0.003756,"end_time":"2024-09-28T11:14:15.260272","exception":false,"start_time":"2024-09-28T11:14:15.256516","status":"completed"},"tags":[]},"outputs":[],"source":[]}],"metadata":{"kaggle":{"accelerator":"none","dataSources":[{"databundleVersionId":9057646,"sourceId":76728,"sourceType":"competition"}],"dockerImageVersionId":30775,"isGpuEnabled":false,"isInternetEnabled":true,"language":"python","sourceType":"notebook"},"kernelspec":{"display_name":"Python 3","language":"python","name":"python3"},"language_info":{"codemirror_mode":{"name":"ipython","version":3},"file_extension":".py","mimetype":"text/x-python","name":"python","nbconvert_exporter":"python","pygments_lexer":"ipython3","version":"3.10.14"},"papermill":{"default_parameters":{},"duration":11.143145,"end_time":"2024-09-28T11:14:15.885524","environment_variables":{},"exception":null,"input_path":"__notebook__.ipynb","output_path":"__notebook__.ipynb","parameters":{},"start_time":"2024-09-28T11:14:04.742379","version":"2.6.0"}},"nbformat":4,"nbformat_minor":5}