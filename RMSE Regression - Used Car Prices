{"cells":[{"source":"<a href=\"https://www.kaggle.com/code/chalseo/rmse-regression-used-car-prices?scriptVersionId=198986243\" target=\"_blank\"><img align=\"left\" alt=\"Kaggle\" title=\"Open in Kaggle\" src=\"https://kaggle.com/static/images/open-in-kaggle.svg\"></a>","metadata":{},"cell_type":"markdown"},{"cell_type":"code","execution_count":1,"id":"ed356bce","metadata":{"_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","execution":{"iopub.execute_input":"2024-10-01T02:00:09.928209Z","iopub.status.busy":"2024-10-01T02:00:09.927753Z","iopub.status.idle":"2024-10-01T02:00:13.580037Z","shell.execute_reply":"2024-10-01T02:00:13.578401Z"},"papermill":{"duration":3.662485,"end_time":"2024-10-01T02:00:13.58342","exception":false,"start_time":"2024-10-01T02:00:09.920935","status":"completed"},"tags":[]},"outputs":[],"source":["import numpy as np \n","import pandas as pd \n","\n","from matplotlib import pyplot as plt\n","import seaborn as sns\n","\n","import datetime\n","import re\n","\n","from xgboost import XGBRegressor\n","\n","from sklearn.compose import make_column_transformer\n","from sklearn.impute import SimpleImputer\n","from sklearn.model_selection import train_test_split, cross_val_score\n","from sklearn.metrics import mean_squared_error\n","from sklearn.preprocessing import LabelEncoder, StandardScaler"]},{"cell_type":"code","execution_count":2,"id":"6d26c4b3","metadata":{"execution":{"iopub.execute_input":"2024-10-01T02:00:13.596034Z","iopub.status.busy":"2024-10-01T02:00:13.594865Z","iopub.status.idle":"2024-10-01T02:00:15.675978Z","shell.execute_reply":"2024-10-01T02:00:15.674608Z"},"papermill":{"duration":2.090578,"end_time":"2024-10-01T02:00:15.678955","exception":false,"start_time":"2024-10-01T02:00:13.588377","status":"completed"},"tags":[]},"outputs":[{"name":"stdout","output_type":"stream","text":["Train data shape:  (188533, 12)\n","Test data shape:  (125690, 11) \n","\n","<class 'pandas.core.frame.DataFrame'>\n","Index: 314223 entries, 0 to 314222\n","Data columns (total 12 columns):\n"," #   Column        Non-Null Count   Dtype  \n","---  ------        --------------   -----  \n"," 0   brand         314223 non-null  object \n"," 1   model         314223 non-null  object \n"," 2   model_year    314223 non-null  int64  \n"," 3   milage        314223 non-null  int64  \n"," 4   fuel_type     305757 non-null  object \n"," 5   engine        314223 non-null  object \n"," 6   transmission  314223 non-null  object \n"," 7   ext_col       314223 non-null  object \n"," 8   int_col       314223 non-null  object \n"," 9   accident      310139 non-null  object \n"," 10  clean_title   278565 non-null  object \n"," 11  price         188533 non-null  float64\n","dtypes: float64(1), int64(2), object(9)\n","memory usage: 31.2+ MB\n"]}],"source":["train_data = pd.read_csv('/kaggle/input/playground-series-s4e9/train.csv', index_col='id')\n","test_data = pd.read_csv('/kaggle/input/playground-series-s4e9/test.csv', index_col='id')\n","submission = pd.read_csv('/kaggle/input/playground-series-s4e9/sample_submission.csv', index_col='id')\n","\n","print(\"Train data shape: \", train_data.shape)\n","print(\"Test data shape: \", test_data.shape, \"\\n\")\n","\n","pd.concat([train_data, test_data]).info()"]},{"cell_type":"code","execution_count":3,"id":"03869dd8","metadata":{"execution":{"iopub.execute_input":"2024-10-01T02:00:15.690511Z","iopub.status.busy":"2024-10-01T02:00:15.690005Z","iopub.status.idle":"2024-10-01T02:00:15.751282Z","shell.execute_reply":"2024-10-01T02:00:15.750063Z"},"papermill":{"duration":0.069981,"end_time":"2024-10-01T02:00:15.753825","exception":false,"start_time":"2024-10-01T02:00:15.683844","status":"completed"},"tags":[]},"outputs":[{"name":"stdout","output_type":"stream","text":["Numerical features:  ['model_year' 'milage' 'price'] \n","\n"]},{"data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>count</th>\n","      <th>mean</th>\n","      <th>std</th>\n","      <th>min</th>\n","      <th>25%</th>\n","      <th>50%</th>\n","      <th>75%</th>\n","      <th>max</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>model_year</th>\n","      <td>188533.0</td>\n","      <td>2015.829998</td>\n","      <td>5.660967</td>\n","      <td>1974.0</td>\n","      <td>2013.0</td>\n","      <td>2017.0</td>\n","      <td>2020.0</td>\n","      <td>2024.0</td>\n","    </tr>\n","    <tr>\n","      <th>milage</th>\n","      <td>188533.0</td>\n","      <td>65705.295174</td>\n","      <td>49798.158076</td>\n","      <td>100.0</td>\n","      <td>24115.0</td>\n","      <td>57785.0</td>\n","      <td>95400.0</td>\n","      <td>405000.0</td>\n","    </tr>\n","    <tr>\n","      <th>price</th>\n","      <td>188533.0</td>\n","      <td>43878.016178</td>\n","      <td>78819.522254</td>\n","      <td>2000.0</td>\n","      <td>17000.0</td>\n","      <td>30825.0</td>\n","      <td>49900.0</td>\n","      <td>2954083.0</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["               count          mean           std     min      25%      50%  \\\n","model_year  188533.0   2015.829998      5.660967  1974.0   2013.0   2017.0   \n","milage      188533.0  65705.295174  49798.158076   100.0  24115.0  57785.0   \n","price       188533.0  43878.016178  78819.522254  2000.0  17000.0  30825.0   \n","\n","                75%        max  \n","model_year   2020.0     2024.0  \n","milage      95400.0   405000.0  \n","price       49900.0  2954083.0  "]},"execution_count":3,"metadata":{},"output_type":"execute_result"}],"source":["numerical_features = train_data.select_dtypes(include=np.number).columns.values\n","\n","print(\"Numerical features: \", numerical_features, \"\\n\")\n","train_data[numerical_features].describe().T"]},{"cell_type":"code","execution_count":4,"id":"b7be1be0","metadata":{"execution":{"iopub.execute_input":"2024-10-01T02:00:15.765473Z","iopub.status.busy":"2024-10-01T02:00:15.765013Z","iopub.status.idle":"2024-10-01T02:00:16.296561Z","shell.execute_reply":"2024-10-01T02:00:16.295182Z"},"papermill":{"duration":0.540704,"end_time":"2024-10-01T02:00:16.299341","exception":false,"start_time":"2024-10-01T02:00:15.758637","status":"completed"},"tags":[]},"outputs":[{"name":"stdout","output_type":"stream","text":["Categorical features:  ['brand' 'model' 'fuel_type' 'engine' 'transmission' 'ext_col' 'int_col'\n"," 'accident' 'clean_title'] \n","\n"]},{"data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>count</th>\n","      <th>unique</th>\n","      <th>top</th>\n","      <th>freq</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>brand</th>\n","      <td>188533</td>\n","      <td>57</td>\n","      <td>Ford</td>\n","      <td>23088</td>\n","    </tr>\n","    <tr>\n","      <th>model</th>\n","      <td>188533</td>\n","      <td>1897</td>\n","      <td>F-150 XLT</td>\n","      <td>2945</td>\n","    </tr>\n","    <tr>\n","      <th>fuel_type</th>\n","      <td>183450</td>\n","      <td>7</td>\n","      <td>Gasoline</td>\n","      <td>165940</td>\n","    </tr>\n","    <tr>\n","      <th>engine</th>\n","      <td>188533</td>\n","      <td>1117</td>\n","      <td>355.0HP 5.3L 8 Cylinder Engine Gasoline Fuel</td>\n","      <td>3462</td>\n","    </tr>\n","    <tr>\n","      <th>transmission</th>\n","      <td>188533</td>\n","      <td>52</td>\n","      <td>A/T</td>\n","      <td>49904</td>\n","    </tr>\n","    <tr>\n","      <th>ext_col</th>\n","      <td>188533</td>\n","      <td>319</td>\n","      <td>Black</td>\n","      <td>48658</td>\n","    </tr>\n","    <tr>\n","      <th>int_col</th>\n","      <td>188533</td>\n","      <td>156</td>\n","      <td>Black</td>\n","      <td>107674</td>\n","    </tr>\n","    <tr>\n","      <th>accident</th>\n","      <td>186081</td>\n","      <td>2</td>\n","      <td>None reported</td>\n","      <td>144514</td>\n","    </tr>\n","    <tr>\n","      <th>clean_title</th>\n","      <td>167114</td>\n","      <td>1</td>\n","      <td>Yes</td>\n","      <td>167114</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["               count unique                                           top  \\\n","brand         188533     57                                          Ford   \n","model         188533   1897                                     F-150 XLT   \n","fuel_type     183450      7                                      Gasoline   \n","engine        188533   1117  355.0HP 5.3L 8 Cylinder Engine Gasoline Fuel   \n","transmission  188533     52                                           A/T   \n","ext_col       188533    319                                         Black   \n","int_col       188533    156                                         Black   \n","accident      186081      2                                 None reported   \n","clean_title   167114      1                                           Yes   \n","\n","                freq  \n","brand          23088  \n","model           2945  \n","fuel_type     165940  \n","engine          3462  \n","transmission   49904  \n","ext_col        48658  \n","int_col       107674  \n","accident      144514  \n","clean_title   167114  "]},"execution_count":4,"metadata":{},"output_type":"execute_result"}],"source":["categorical_features = train_data.select_dtypes(exclude=np.number).columns.values\n","print(\"Categorical features: \", categorical_features, \"\\n\")\n","\n","train_data[categorical_features].describe().T"]},{"cell_type":"code","execution_count":5,"id":"e8b0cb3e","metadata":{"execution":{"iopub.execute_input":"2024-10-01T02:00:16.312337Z","iopub.status.busy":"2024-10-01T02:00:16.311871Z","iopub.status.idle":"2024-10-01T02:00:16.320998Z","shell.execute_reply":"2024-10-01T02:00:16.319559Z"},"papermill":{"duration":0.018386,"end_time":"2024-10-01T02:00:16.323591","exception":false,"start_time":"2024-10-01T02:00:16.305205","status":"completed"},"tags":[]},"outputs":[],"source":["def get_re_group(r, txt):\n","    match = re.search(r, txt)\n","    \n","    if match:\n","        return float(match.groups()[0])\n","    else:\n","        return np.nan\n","\n","def address_missing_values(data):\n","    imputer = SimpleImputer(strategy='most_frequent')\n","    imputer_columns = data.isna().sum().where(lambda t: t > 0)\n","    imputer_columns = imputer_columns.dropna().index.values\n","    \n","    data[imputer_columns] = imputer.fit_transform(data[imputer_columns])\n","    data.clean_title = data.clean_title.apply(lambda title: 1 if title!='Yes' else 0)\n","    \n","    return data"]},{"cell_type":"code","execution_count":6,"id":"f256c733","metadata":{"execution":{"iopub.execute_input":"2024-10-01T02:00:16.336942Z","iopub.status.busy":"2024-10-01T02:00:16.335994Z","iopub.status.idle":"2024-10-01T02:00:36.294441Z","shell.execute_reply":"2024-10-01T02:00:36.293093Z"},"papermill":{"duration":19.968477,"end_time":"2024-10-01T02:00:36.297482","exception":false,"start_time":"2024-10-01T02:00:16.329005","status":"completed"},"tags":[]},"outputs":[{"data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>brand</th>\n","      <th>model_year</th>\n","      <th>milage</th>\n","      <th>fuel_type</th>\n","      <th>ext_col</th>\n","      <th>int_col</th>\n","      <th>accident</th>\n","      <th>clean_title</th>\n","      <th>price</th>\n","      <th>horse_power</th>\n","      <th>...</th>\n","      <th>model_type</th>\n","      <th>metallic_ext</th>\n","      <th>special_ext_coat</th>\n","      <th>top_ext_col</th>\n","      <th>dual_col_int</th>\n","      <th>black_int</th>\n","      <th>car_age</th>\n","      <th>yearly_mileage</th>\n","      <th>big_three_brand</th>\n","      <th>luxury_brand</th>\n","    </tr>\n","    <tr>\n","      <th>id</th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>31</td>\n","      <td>2007</td>\n","      <td>213000</td>\n","      <td>2</td>\n","      <td>312</td>\n","      <td>71</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>4200</td>\n","      <td>52</td>\n","      <td>...</td>\n","      <td>2</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>17</td>\n","      <td>12529.411765</td>\n","      <td>0</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>28</td>\n","      <td>2002</td>\n","      <td>143250</td>\n","      <td>2</td>\n","      <td>263</td>\n","      <td>10</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>4999</td>\n","      <td>119</td>\n","      <td>...</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>22</td>\n","      <td>6511.363636</td>\n","      <td>0</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>9</td>\n","      <td>2002</td>\n","      <td>136731</td>\n","      <td>1</td>\n","      <td>38</td>\n","      <td>71</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>13900</td>\n","      <td>175</td>\n","      <td>...</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>22</td>\n","      <td>6215.045455</td>\n","      <td>1</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>16</td>\n","      <td>2017</td>\n","      <td>19500</td>\n","      <td>2</td>\n","      <td>29</td>\n","      <td>14</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>45000</td>\n","      <td>239</td>\n","      <td>...</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>7</td>\n","      <td>2785.714286</td>\n","      <td>0</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>36</td>\n","      <td>2021</td>\n","      <td>7388</td>\n","      <td>2</td>\n","      <td>29</td>\n","      <td>10</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>97500</td>\n","      <td>85</td>\n","      <td>...</td>\n","      <td>2</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>3</td>\n","      <td>2462.666667</td>\n","      <td>0</td>\n","      <td>1</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>5 rows × 25 columns</p>\n","</div>"],"text/plain":["    brand  model_year  milage  fuel_type  ext_col  int_col  accident  \\\n","id                                                                     \n","0      31        2007  213000          2      312       71         1   \n","1      28        2002  143250          2      263       10         0   \n","2       9        2002  136731          1       38       71         1   \n","3      16        2017   19500          2       29       14         1   \n","4      36        2021    7388          2       29       10         1   \n","\n","    clean_title  price  horse_power  ...  model_type  metallic_ext  \\\n","id                                   ...                             \n","0             0   4200           52  ...           2             0   \n","1             0   4999          119  ...           0             0   \n","2             0  13900          175  ...           0             0   \n","3             0  45000          239  ...           0             0   \n","4             0  97500           85  ...           2             0   \n","\n","    special_ext_coat  top_ext_col  dual_col_int  black_int  car_age  \\\n","id                                                                    \n","0                  0            0             0          0       17   \n","1                  0            1             0          0       22   \n","2                  0            1             0          0       22   \n","3                  0            1             0          1        7   \n","4                  0            1             0          0        3   \n","\n","    yearly_mileage  big_three_brand  luxury_brand  \n","id                                                 \n","0     12529.411765                0             0  \n","1      6511.363636                0             0  \n","2      6215.045455                1             0  \n","3      2785.714286                0             0  \n","4      2462.666667                0             1  \n","\n","[5 rows x 25 columns]"]},"execution_count":6,"metadata":{},"output_type":"execute_result"}],"source":["def preprocess_data(data):\n","    data['horse_power'] = data.engine.apply(lambda en: get_re_group(r'(\\d+\\.\\d+)HP', en))\n","    data['engine_size'] = data.engine.apply(lambda en: get_re_group(r'(\\d+\\.\\d+)L', en))\n","    data['cylinders'] = data.engine.apply(lambda en: get_re_group(r'(\\d+) Cylinder', en))\n","\n","    data[\"engine_type\"] = \"Other\"\n","    data.loc[data.engine.str.contains('Diesel', na=False, case=False), 'engine_type'] = 'Diesel'\n","    data.loc[data.engine.str.contains('Flex Fuel|E85', na=False, case=False), 'engine_type'] = 'Flex Fuel'\n","    data.loc[data.engine.str.contains('Electric|Battery|kW|charge|kw', na=False, case=False), 'engine_type'] = 'Electric'\n","    data.loc[data.engine.str.contains('Gasoline|Standard|Turbo|Liter|GDI|MPFI|PDI', na=False, case=False), 'engine_type'] = 'Gasoline'\n","\n","    data[\"transmission_type\"] = \"Other\"\n","    data.loc[data.transmission.str.contains('A/T|Automatic|AT|Variable', na=False, case=False), 'transmission_type'] = 'Automatic'\n","    data.loc[data.transmission.str.contains('M/T|mt|Manual|at/mt|mt/at|At/mt', na=False, case=False), 'transmission_type'] = 'Manual'\n","    data[\"transmission_speed\"] = data.transmission.apply(lambda trans: int(re.findall(\"\\d+\", \n","                                                                        trans)[0]) if len(re.findall(\"\\d+\", trans)) == 1 else np.nan)\n","   \n","    data[\"model_type\"] = \"Other\"\n","    data.loc[data.model.str.contains('S|L|Base', na=False, case=False), 'model_type'] = 'Base'\n","    data.loc[data.model.str.contains('SE|SX|SRT|GT', na=False, case=False), 'model_type'] = 'Mid-Range'\n","    data.loc[data.model.str.contains('EX|SXT', na=False, case=False), 'model_type'] = 'Performance/Sport'\n","    data.loc[data.model.str.contains('EX-L|LX|LE|SEL|Platinum|Premium|Limited', na=False, case=False), 'model_type'] = 'Luxury/High-End';[]\n","\n","    data['metallic_ext'] = data.ext_col.apply(lambda color: 1 if \"Metallic\" in color else 0)\n","    data['special_ext_coat'] = data.ext_col.apply(lambda color: 1 if \"coat\" in color.lower() else 0)  \n","    data['top_ext_col'] = data.ext_col.apply(lambda color: 1 if color.lower() in [\"white\", \"black\", \"silver\", \"grey\", \"gray\", \"blue\"] else 0)    \n","    \n","    data['dual_col_int'] = data.int_col.apply(lambda color: 1 if '/' in color else 0)\n","    data['black_int'] = data.int_col.apply(lambda color: 1 if color.lower() == \"black\" else 0)\n","    \n","    data['car_age'] = datetime.datetime.now().year - data.model_year\n","    data['yearly_mileage'] = data.milage / data.car_age\n","    data['yearly_mileage'] = data.yearly_mileage.apply(lambda mileage: 0 if mileage == np.inf else mileage)\n","\n","    data[\"big_three_brand\"] = data.brand.apply(lambda b: 1 if b in [\"Chrysler\", \"Ford\", \"Chevrolet\", \n","                            \"Buick\", \"GMC\", \"Cadillac\", \"Dodge\", \"Jeep\", \"RAM\"] else 0)\n","    data[\"luxury_brand\"] = data.brand.apply(lambda b: 1 if b in [\"BMW\", \"Mercedes-Benz\", \"Tesla\", \"Audi\",\n","                            \"Jaguar\", \"Land Rover\", \"Cadillac\", \"Porsche\", \"Volvo\", \"Lexus\", \"Ferrari\", \"Lamborghini\",\n","                                                \"Bentley\", \"Bugatti\", \"Maybach\", \"Chrysler\", \"Rolls-Royce\"] else 0)\n","\n","    data = address_missing_values(data)\n","    categorical_features = data.select_dtypes(exclude=np.number).columns.values\n","    for category in categorical_features:\n","        data[category] = LabelEncoder().fit_transform(data[category])\n","\n","    return data.drop([\"engine\", \"transmission\", \"model\"], axis=1)\n","\n","train = preprocess_data(train_data)\n","test = preprocess_data(test_data)\n","\n","train.head()"]},{"cell_type":"code","execution_count":7,"id":"465d2b72","metadata":{"execution":{"iopub.execute_input":"2024-10-01T02:00:36.31112Z","iopub.status.busy":"2024-10-01T02:00:36.310673Z","iopub.status.idle":"2024-10-01T02:00:36.420142Z","shell.execute_reply":"2024-10-01T02:00:36.418837Z"},"papermill":{"duration":0.119762,"end_time":"2024-10-01T02:00:36.423165","exception":false,"start_time":"2024-10-01T02:00:36.303403","status":"completed"},"tags":[]},"outputs":[],"source":["assert(train.isna().sum().sum() == 0)\n","assert(train.where(train==np.inf).sum().sum() == 0)"]},{"cell_type":"code","execution_count":8,"id":"4d94b6cf","metadata":{"execution":{"iopub.execute_input":"2024-10-01T02:00:36.437426Z","iopub.status.busy":"2024-10-01T02:00:36.436428Z","iopub.status.idle":"2024-10-01T02:00:36.81256Z","shell.execute_reply":"2024-10-01T02:00:36.811315Z"},"papermill":{"duration":0.38642,"end_time":"2024-10-01T02:00:36.815489","exception":false,"start_time":"2024-10-01T02:00:36.429069","status":"completed"},"tags":[]},"outputs":[{"name":"stdout","output_type":"stream","text":["Features: \n"," ['brand' 'model_year' 'milage' 'fuel_type' 'ext_col' 'int_col' 'accident'\n"," 'clean_title' 'horse_power' 'engine_size' 'cylinders' 'engine_type'\n"," 'transmission_type' 'transmission_speed' 'model_type' 'metallic_ext'\n"," 'special_ext_coat' 'top_ext_col' 'dual_col_int' 'black_int' 'car_age'\n"," 'yearly_mileage' 'big_three_brand' 'luxury_brand'] \n","\n"]},{"data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>brand</th>\n","      <th>model_year</th>\n","      <th>milage</th>\n","      <th>fuel_type</th>\n","      <th>ext_col</th>\n","      <th>int_col</th>\n","      <th>accident</th>\n","      <th>clean_title</th>\n","      <th>horse_power</th>\n","      <th>engine_size</th>\n","      <th>...</th>\n","      <th>model_type</th>\n","      <th>metallic_ext</th>\n","      <th>special_ext_coat</th>\n","      <th>top_ext_col</th>\n","      <th>dual_col_int</th>\n","      <th>black_int</th>\n","      <th>car_age</th>\n","      <th>yearly_mileage</th>\n","      <th>big_three_brand</th>\n","      <th>luxury_brand</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>101343</th>\n","      <td>-0.892449</td>\n","      <td>1.089923</td>\n","      <td>-1.150754</td>\n","      <td>0.02532</td>\n","      <td>1.280006</td>\n","      <td>-0.526804</td>\n","      <td>0.531822</td>\n","      <td>0.0</td>\n","      <td>1.453158</td>\n","      <td>1.883733</td>\n","      <td>...</td>\n","      <td>-0.976886</td>\n","      <td>-0.217514</td>\n","      <td>-0.130521</td>\n","      <td>0.512224</td>\n","      <td>-0.103599</td>\n","      <td>0.866271</td>\n","      <td>-1.089923</td>\n","      <td>-0.716169</td>\n","      <td>1.414371</td>\n","      <td>-0.862440</td>\n","    </tr>\n","    <tr>\n","      <th>33553</th>\n","      <td>-1.207546</td>\n","      <td>1.089923</td>\n","      <td>-0.549204</td>\n","      <td>0.02532</td>\n","      <td>-0.142518</td>\n","      <td>0.000083</td>\n","      <td>0.531822</td>\n","      <td>0.0</td>\n","      <td>-0.268601</td>\n","      <td>-0.554419</td>\n","      <td>...</td>\n","      <td>1.625647</td>\n","      <td>4.597399</td>\n","      <td>-0.130521</td>\n","      <td>-1.952270</td>\n","      <td>9.652581</td>\n","      <td>-1.154374</td>\n","      <td>-1.089923</td>\n","      <td>1.676201</td>\n","      <td>-0.707028</td>\n","      <td>1.159501</td>\n","    </tr>\n","    <tr>\n","      <th>72595</th>\n","      <td>-1.207546</td>\n","      <td>0.206679</td>\n","      <td>-0.720014</td>\n","      <td>0.02532</td>\n","      <td>1.280006</td>\n","      <td>-0.100276</td>\n","      <td>-1.880330</td>\n","      <td>0.0</td>\n","      <td>1.148422</td>\n","      <td>0.490503</td>\n","      <td>...</td>\n","      <td>1.625647</td>\n","      <td>-0.217514</td>\n","      <td>-0.130521</td>\n","      <td>0.512224</td>\n","      <td>-0.103599</td>\n","      <td>-1.154374</td>\n","      <td>-0.206679</td>\n","      <td>-0.705901</td>\n","      <td>-0.707028</td>\n","      <td>1.159501</td>\n","    </tr>\n","    <tr>\n","      <th>125888</th>\n","      <td>0.809075</td>\n","      <td>0.736626</td>\n","      <td>-0.907773</td>\n","      <td>0.02532</td>\n","      <td>-1.119959</td>\n","      <td>-0.526804</td>\n","      <td>0.531822</td>\n","      <td>0.0</td>\n","      <td>1.316027</td>\n","      <td>0.229273</td>\n","      <td>...</td>\n","      <td>0.758136</td>\n","      <td>-0.217514</td>\n","      <td>-0.130521</td>\n","      <td>0.512224</td>\n","      <td>-0.103599</td>\n","      <td>0.866271</td>\n","      <td>-0.736626</td>\n","      <td>-0.568423</td>\n","      <td>-0.707028</td>\n","      <td>1.159501</td>\n","    </tr>\n","    <tr>\n","      <th>25753</th>\n","      <td>1.250211</td>\n","      <td>-0.146618</td>\n","      <td>0.246891</td>\n","      <td>0.02532</td>\n","      <td>-1.119959</td>\n","      <td>-0.526804</td>\n","      <td>0.531822</td>\n","      <td>0.0</td>\n","      <td>0.965580</td>\n","      <td>-0.119035</td>\n","      <td>...</td>\n","      <td>-0.976886</td>\n","      <td>-0.217514</td>\n","      <td>-0.130521</td>\n","      <td>0.512224</td>\n","      <td>-0.103599</td>\n","      <td>0.866271</td>\n","      <td>0.146618</td>\n","      <td>-0.002728</td>\n","      <td>-0.707028</td>\n","      <td>1.159501</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>5 rows × 24 columns</p>\n","</div>"],"text/plain":["           brand  model_year    milage  fuel_type   ext_col   int_col  \\\n","101343 -0.892449    1.089923 -1.150754    0.02532  1.280006 -0.526804   \n","33553  -1.207546    1.089923 -0.549204    0.02532 -0.142518  0.000083   \n","72595  -1.207546    0.206679 -0.720014    0.02532  1.280006 -0.100276   \n","125888  0.809075    0.736626 -0.907773    0.02532 -1.119959 -0.526804   \n","25753   1.250211   -0.146618  0.246891    0.02532 -1.119959 -0.526804   \n","\n","        accident  clean_title  horse_power  engine_size  ...  model_type  \\\n","101343  0.531822          0.0     1.453158     1.883733  ...   -0.976886   \n","33553   0.531822          0.0    -0.268601    -0.554419  ...    1.625647   \n","72595  -1.880330          0.0     1.148422     0.490503  ...    1.625647   \n","125888  0.531822          0.0     1.316027     0.229273  ...    0.758136   \n","25753   0.531822          0.0     0.965580    -0.119035  ...   -0.976886   \n","\n","        metallic_ext  special_ext_coat  top_ext_col  dual_col_int  black_int  \\\n","101343     -0.217514         -0.130521     0.512224     -0.103599   0.866271   \n","33553       4.597399         -0.130521    -1.952270      9.652581  -1.154374   \n","72595      -0.217514         -0.130521     0.512224     -0.103599  -1.154374   \n","125888     -0.217514         -0.130521     0.512224     -0.103599   0.866271   \n","25753      -0.217514         -0.130521     0.512224     -0.103599   0.866271   \n","\n","         car_age  yearly_mileage  big_three_brand  luxury_brand  \n","101343 -1.089923       -0.716169         1.414371     -0.862440  \n","33553  -1.089923        1.676201        -0.707028      1.159501  \n","72595  -0.206679       -0.705901        -0.707028      1.159501  \n","125888 -0.736626       -0.568423        -0.707028      1.159501  \n","25753   0.146618       -0.002728        -0.707028      1.159501  \n","\n","[5 rows x 24 columns]"]},"execution_count":8,"metadata":{},"output_type":"execute_result"}],"source":["transformer = make_column_transformer(\n","    (StandardScaler(), train.columns.values), sparse_threshold=0)\n","transformed_data = transformer.fit_transform(train)\n","transformed_data\n","\n","feature_names = [name.split(\"__\")[-1] for name in transformer.get_feature_names_out()]\n","X = pd.DataFrame(transformed_data, columns=feature_names).drop(columns=[\"price\"])\n","y = train_data.price.values\n","\n","X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42, stratify=y) \n","\n","print(\"Features: \\n\", X_train.columns.values, \"\\n\")\n","X_train.head()"]},{"cell_type":"code","execution_count":9,"id":"31a364ec","metadata":{"execution":{"iopub.execute_input":"2024-10-01T02:00:36.830281Z","iopub.status.busy":"2024-10-01T02:00:36.829806Z","iopub.status.idle":"2024-10-01T02:00:43.511865Z","shell.execute_reply":"2024-10-01T02:00:43.510926Z"},"papermill":{"duration":6.692506,"end_time":"2024-10-01T02:00:43.514467","exception":false,"start_time":"2024-10-01T02:00:36.821961","status":"completed"},"tags":[]},"outputs":[{"name":"stdout","output_type":"stream","text":["Cross-validation RMSE scores: [73912.01149313 74472.52462129 71850.04486542]\n","Mean RMSE: 73411.53 (+/- 2255.19)\n"]}],"source":["model = XGBRegressor(n_estimators=200, random_state=42, learning_rate=0.05, max_depth=6)\n","cv_scores = cross_val_score(model, X, y, cv=3, scoring='neg_root_mean_squared_error')\n","rmse_scores = -cv_scores\n","\n","print(f\"Cross-validation RMSE scores: {rmse_scores}\")\n","print(f\"Mean RMSE: {np.mean(rmse_scores):.2f} (+/- {np.std(rmse_scores) * 2:.2f})\")"]},{"cell_type":"code","execution_count":10,"id":"6f8f31e4","metadata":{"execution":{"iopub.execute_input":"2024-10-01T02:00:43.530721Z","iopub.status.busy":"2024-10-01T02:00:43.530238Z","iopub.status.idle":"2024-10-01T02:00:47.207823Z","shell.execute_reply":"2024-10-01T02:00:47.206529Z"},"papermill":{"duration":3.688407,"end_time":"2024-10-01T02:00:47.210533","exception":false,"start_time":"2024-10-01T02:00:43.522126","status":"completed"},"tags":[]},"outputs":[{"data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>price</th>\n","    </tr>\n","    <tr>\n","      <th>id</th>\n","      <th></th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>188533</th>\n","      <td>142934.531250</td>\n","    </tr>\n","    <tr>\n","      <th>188534</th>\n","      <td>158318.687500</td>\n","    </tr>\n","    <tr>\n","      <th>188535</th>\n","      <td>151763.265625</td>\n","    </tr>\n","    <tr>\n","      <th>188536</th>\n","      <td>140466.343750</td>\n","    </tr>\n","    <tr>\n","      <th>188537</th>\n","      <td>140277.546875</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["                price\n","id                   \n","188533  142934.531250\n","188534  158318.687500\n","188535  151763.265625\n","188536  140466.343750\n","188537  140277.546875"]},"execution_count":10,"metadata":{},"output_type":"execute_result"}],"source":["model.fit(X, y)\n","\n","submission.price = model.predict(test)\n","submission.to_csv('submission.csv')\n","submission.head()"]}],"metadata":{"kaggle":{"accelerator":"none","dataSources":[{"databundleVersionId":9057646,"sourceId":76728,"sourceType":"competition"}],"dockerImageVersionId":30775,"isGpuEnabled":false,"isInternetEnabled":true,"language":"python","sourceType":"notebook"},"kernelspec":{"display_name":"Python 3","language":"python","name":"python3"},"language_info":{"codemirror_mode":{"name":"ipython","version":3},"file_extension":".py","mimetype":"text/x-python","name":"python","nbconvert_exporter":"python","pygments_lexer":"ipython3","version":"3.10.14"},"papermill":{"default_parameters":{},"duration":41.24122,"end_time":"2024-10-01T02:00:47.941236","environment_variables":{},"exception":null,"input_path":"__notebook__.ipynb","output_path":"__notebook__.ipynb","parameters":{},"start_time":"2024-10-01T02:00:06.700016","version":"2.6.0"}},"nbformat":4,"nbformat_minor":5}